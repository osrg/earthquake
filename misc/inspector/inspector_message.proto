// Copyright (C) 2014 Nippon Telegraph and Telephone Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package pb;

option java_package = "net.osrg.namazu";

message InspectorMsgReq_Event_FuncCall {
  required string name = 1;
};

message InspectorMsgReq_Event_FuncReturn {
  required string name = 1;
};

message InspectorMsgReq_Event_Exit {
  required int32 exitCode = 1;
};

message InspectorMsgReq_Event {
  enum Type {
    FUNC_CALL = 1;
    FUNC_RETURN = 2;
    EXIT = 3;
  };

  required Type type = 1;

  optional InspectorMsgReq_Event_FuncCall FuncCall = 2;
  optional InspectorMsgReq_Event_FuncReturn FuncReturn = 3;
  optional InspectorMsgReq_Event_Exit Exit = 4;
};

message InspectorMsgReq_Initiation {
  required string entityId = 1;
};

message InspectorMsgReq_JavaSpecificFields_StackTraceElement {
  required string fileName = 1;
  required string className = 2;
  required string methodName = 3;
  required int32 lineNumber = 4;
};

message InspectorMsgReq_JavaSpecificFields_Params {
  required string name = 1;
  required string value = 2;
};

message InspectorMsgReq_JavaSpecificFields {
  required string threadName = 1;

  required int32 nrStackTraceElements = 2;
  repeated InspectorMsgReq_JavaSpecificFields_StackTraceElement stackTraceElements = 3;

  required int32 nrParams = 4;
  repeated InspectorMsgReq_JavaSpecificFields_Params params = 5;
};

message InspectorMsgReq {
  enum Type {
    EVENT = 1;
    INITIATION = 2;
  };

  required string entity_id = 1;
  required Type type = 2;

  required int32 pid = 3;
  required int32 tid = 4;

  required int32 msg_id = 5;

  optional int32 ga_msg_id = 6;	// set by guestagent in a case of non direct mode

  optional InspectorMsgReq_Event Event = 7;
  optional InspectorMsgReq_Initiation Initiation = 8;

  required int32 HasJavaSpecificFields = 9;
  optional InspectorMsgReq_JavaSpecificFields JavaSpecificFields = 10;
};

message InspectorMsgRsp {
  enum Result {
    ACK = 1;
    ERROR = 2;
    END = 3;			// FIXME: is this reply?
  };

  required Result res = 1;	// FIXME: result should be required field
  optional int32 msg_id = 2;

  optional int32 ga_msg_id = 3;	// set by guestagent in a case of non direct mode
};
