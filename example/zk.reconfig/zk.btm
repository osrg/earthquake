RULE FinalRequestProcessor.processRequest
CLASS FinalRequestProcessor
METHOD processRequest
HELPER EQHelper
BIND argMap = new java.util.HashMap(), this=$0, request=$1
AT ENTRY
IF true
DO
argMap.put("request", request.toString());
eventFuncCall("FinalRequestProcessor.processRequest", argMap);
ENDRULE

RULE PrepRequestProcessor.processRequest
CLASS PrepRequestProcessor
METHOD processRequest
HELPER EQHelper
BIND argMap = new java.util.HashMap(), this=$0, request=$1
AT ENTRY
IF true
DO
argMap.put("request", request.toString());
eventFuncCall("PrepRequestProcessor.processRequest", argMap);
ENDRULE

RULE SyncRequestProcessor.processRequest
CLASS SyncRequestProcessor
METHOD processRequest
HELPER EQHelper
BIND argMap = new java.util.HashMap(), this=$0, request=$1
AT ENTRY
IF true
DO
argMap.put("request", request.toString());
eventFuncCall("SyncRequestProcessor.processRequest", argMap);
ENDRULE

RULE AckRequestProcessor.processRequest
CLASS AckRequestProcessor
METHOD processRequest
HELPER EQHelper
BIND argMap = new java.util.HashMap(), this=$0, request=$1
AT ENTRY
IF true
DO
argMap.put("request", request.toString());
eventFuncCall("AckRequestProcessor.processRequest", argMap);
ENDRULE

RULE CommitProcessor.processRequest
CLASS CommitProcessor
METHOD processRequest
HELPER EQHelper
BIND argMap = new java.util.HashMap(), this=$0, request=$1
AT ENTRY
IF true
DO
argMap.put("request", request.toString());
eventFuncCall("CommitProcessor.processRequest", argMap);
ENDRULE

RULE FollowerRequestProcessor.processRequest
CLASS FollowerRequestProcessor
METHOD processRequest
HELPER EQHelper
BIND argMap = new java.util.HashMap(), this=$0, request=$1
AT ENTRY
IF true
DO
argMap.put("request", request.toString());
eventFuncCall("FollowerRequestProcessor.processRequest", argMap);
ENDRULE

RULE LeaderRequestProcessor.processRequest
CLASS LeaderRequestProcessor
METHOD processRequest
HELPER EQHelper
BIND argMap = new java.util.HashMap(), this=$0, request=$1
AT ENTRY
IF true
DO
argMap.put("request", request.toString());
eventFuncCall("LeaderRequestProcessor.processRequest", argMap);
ENDRULE

RULE ObserverRequestProcessor.processRequest
CLASS ObserverRequestProcessor
METHOD processRequest
HELPER EQHelper
BIND argMap = new java.util.HashMap(), this=$0, request=$1
AT ENTRY
IF true
DO
argMap.put("request", request.toString());
eventFuncCall("ObserverRequestProcessor.processRequest", argMap);
ENDRULE

RULE ProposalRequestProcessor.processRequest
CLASS ProposalRequestProcessor
METHOD processRequest
HELPER EQHelper
BIND argMap = new java.util.HashMap(), this=$0, request=$1
AT ENTRY
IF true
DO
argMap.put("request", request.toString());
eventFuncCall("ProposalRequestProcessor.processRequest", argMap);
ENDRULE

RULE ReadOnlyRequestProcessor.processRequest
CLASS ReadOnlyRequestProcessor
METHOD processRequest
HELPER EQHelper
BIND argMap = new java.util.HashMap(), this=$0, request=$1
AT ENTRY
IF true
DO
argMap.put("request", request.toString());
eventFuncCall("ReadOnlyRequestProcessor.processRequest", argMap);
ENDRULE

RULE SendAckRequestProcessor.processRequest
CLASS SendAckRequestProcessor
METHOD processRequest
HELPER EQHelper
BIND argMap = new java.util.HashMap(), this=$0, request=$1
AT ENTRY
IF true
DO
argMap.put("request", request.toString());
eventFuncCall("SendAckRequestProcessor.processRequest", argMap);
ENDRULE

RULE Leader.ToBeAppliedRequestProcessor.processRequest
CLASS ToBeAppliedRequestProcessor
METHOD processRequest
HELPER EQHelper
BIND argMap = new java.util.HashMap(), this=$0, request=$1
AT ENTRY
IF true
DO
argMap.put("request", request.toString());
eventFuncCall("Leader.ToBeAppliedRequestProcessor.processRequest", argMap);
ENDRULE

RULE invoke initiation, call static constructor of EQHelper
CLASS QuorumPeerMain
METHOD main
HELPER EQHelper
AT ENTRY
IF true
DO
System.out.println("BTM: main()");
ENDRULE
